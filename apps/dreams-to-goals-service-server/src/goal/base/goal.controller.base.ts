/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GoalService } from "../goal.service";
import { GoalCreateInput } from "./GoalCreateInput";
import { Goal } from "./Goal";
import { GoalFindManyArgs } from "./GoalFindManyArgs";
import { GoalWhereUniqueInput } from "./GoalWhereUniqueInput";
import { GoalUpdateInput } from "./GoalUpdateInput";
import { MilestoneFindManyArgs } from "../../milestone/base/MilestoneFindManyArgs";
import { Milestone } from "../../milestone/base/Milestone";
import { MilestoneWhereUniqueInput } from "../../milestone/base/MilestoneWhereUniqueInput";

export class GoalControllerBase {
  constructor(protected readonly service: GoalService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Goal })
  async createGoal(@common.Body() data: GoalCreateInput): Promise<Goal> {
    return await this.service.createGoal({
      data: {
        ...data,

        dream: data.dream
          ? {
              connect: data.dream,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        details: true,

        dream: {
          select: {
            id: true,
          },
        },

        id: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Goal] })
  @ApiNestedQuery(GoalFindManyArgs)
  async goals(@common.Req() request: Request): Promise<Goal[]> {
    const args = plainToClass(GoalFindManyArgs, request.query);
    return this.service.goals({
      ...args,
      select: {
        createdAt: true,
        details: true,

        dream: {
          select: {
            id: true,
          },
        },

        id: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Goal })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async goal(
    @common.Param() params: GoalWhereUniqueInput
  ): Promise<Goal | null> {
    const result = await this.service.goal({
      where: params,
      select: {
        createdAt: true,
        details: true,

        dream: {
          select: {
            id: true,
          },
        },

        id: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Goal })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateGoal(
    @common.Param() params: GoalWhereUniqueInput,
    @common.Body() data: GoalUpdateInput
  ): Promise<Goal | null> {
    try {
      return await this.service.updateGoal({
        where: params,
        data: {
          ...data,

          dream: data.dream
            ? {
                connect: data.dream,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          details: true,

          dream: {
            select: {
              id: true,
            },
          },

          id: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Goal })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteGoal(
    @common.Param() params: GoalWhereUniqueInput
  ): Promise<Goal | null> {
    try {
      return await this.service.deleteGoal({
        where: params,
        select: {
          createdAt: true,
          details: true,

          dream: {
            select: {
              id: true,
            },
          },

          id: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/milestones")
  @ApiNestedQuery(MilestoneFindManyArgs)
  async findMilestones(
    @common.Req() request: Request,
    @common.Param() params: GoalWhereUniqueInput
  ): Promise<Milestone[]> {
    const query = plainToClass(MilestoneFindManyArgs, request.query);
    const results = await this.service.findMilestones(params.id, {
      ...query,
      select: {
        createdAt: true,
        details: true,

        goal: {
          select: {
            id: true,
          },
        },

        id: true,
        title: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/milestones")
  async connectMilestones(
    @common.Param() params: GoalWhereUniqueInput,
    @common.Body() body: MilestoneWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      milestones: {
        connect: body,
      },
    };
    await this.service.updateGoal({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/milestones")
  async updateMilestones(
    @common.Param() params: GoalWhereUniqueInput,
    @common.Body() body: MilestoneWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      milestones: {
        set: body,
      },
    };
    await this.service.updateGoal({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/milestones")
  async disconnectMilestones(
    @common.Param() params: GoalWhereUniqueInput,
    @common.Body() body: MilestoneWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      milestones: {
        disconnect: body,
      },
    };
    await this.service.updateGoal({
      where: params,
      data,
      select: { id: true },
    });
  }
}
