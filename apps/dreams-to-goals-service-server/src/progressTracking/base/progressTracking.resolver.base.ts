/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ProgressTracking } from "./ProgressTracking";
import { ProgressTrackingCountArgs } from "./ProgressTrackingCountArgs";
import { ProgressTrackingFindManyArgs } from "./ProgressTrackingFindManyArgs";
import { ProgressTrackingFindUniqueArgs } from "./ProgressTrackingFindUniqueArgs";
import { DeleteProgressTrackingArgs } from "./DeleteProgressTrackingArgs";
import { ProgressTrackingService } from "../progressTracking.service";
@graphql.Resolver(() => ProgressTracking)
export class ProgressTrackingResolverBase {
  constructor(protected readonly service: ProgressTrackingService) {}

  async _progressTrackingsMeta(
    @graphql.Args() args: ProgressTrackingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ProgressTracking])
  async progressTrackings(
    @graphql.Args() args: ProgressTrackingFindManyArgs
  ): Promise<ProgressTracking[]> {
    return this.service.progressTrackings(args);
  }

  @graphql.Query(() => ProgressTracking, { nullable: true })
  async progressTracking(
    @graphql.Args() args: ProgressTrackingFindUniqueArgs
  ): Promise<ProgressTracking | null> {
    const result = await this.service.progressTracking(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ProgressTracking)
  async deleteProgressTracking(
    @graphql.Args() args: DeleteProgressTrackingArgs
  ): Promise<ProgressTracking | null> {
    try {
      return await this.service.deleteProgressTracking(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
