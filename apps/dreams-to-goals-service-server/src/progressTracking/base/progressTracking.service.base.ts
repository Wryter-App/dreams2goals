/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ProgressTracking as PrismaProgressTracking,
} from "@prisma/client";

export class ProgressTrackingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ProgressTrackingCountArgs, "select">
  ): Promise<number> {
    return this.prisma.progressTracking.count(args);
  }

  async progressTrackings(
    args: Prisma.ProgressTrackingFindManyArgs
  ): Promise<PrismaProgressTracking[]> {
    return this.prisma.progressTracking.findMany(args);
  }
  async progressTracking(
    args: Prisma.ProgressTrackingFindUniqueArgs
  ): Promise<PrismaProgressTracking | null> {
    return this.prisma.progressTracking.findUnique(args);
  }
  async createProgressTracking(
    args: Prisma.ProgressTrackingCreateArgs
  ): Promise<PrismaProgressTracking> {
    return this.prisma.progressTracking.create(args);
  }
  async updateProgressTracking(
    args: Prisma.ProgressTrackingUpdateArgs
  ): Promise<PrismaProgressTracking> {
    return this.prisma.progressTracking.update(args);
  }
  async deleteProgressTracking(
    args: Prisma.ProgressTrackingDeleteArgs
  ): Promise<PrismaProgressTracking> {
    return this.prisma.progressTracking.delete(args);
  }
}
