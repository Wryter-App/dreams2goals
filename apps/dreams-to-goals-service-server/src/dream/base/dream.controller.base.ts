/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DreamService } from "../dream.service";
import { DreamCreateInput } from "./DreamCreateInput";
import { Dream } from "./Dream";
import { DreamFindManyArgs } from "./DreamFindManyArgs";
import { DreamWhereUniqueInput } from "./DreamWhereUniqueInput";
import { DreamUpdateInput } from "./DreamUpdateInput";

export class DreamControllerBase {
  constructor(protected readonly service: DreamService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Dream })
  async createDream(@common.Body() data: DreamCreateInput): Promise<Dream> {
    return await this.service.createDream({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Dream] })
  @ApiNestedQuery(DreamFindManyArgs)
  async dreams(@common.Req() request: Request): Promise<Dream[]> {
    const args = plainToClass(DreamFindManyArgs, request.query);
    return this.service.dreams({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Dream })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async dream(
    @common.Param() params: DreamWhereUniqueInput
  ): Promise<Dream | null> {
    const result = await this.service.dream({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Dream })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDream(
    @common.Param() params: DreamWhereUniqueInput,
    @common.Body() data: DreamUpdateInput
  ): Promise<Dream | null> {
    try {
      return await this.service.updateDream({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Dream })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDream(
    @common.Param() params: DreamWhereUniqueInput
  ): Promise<Dream | null> {
    try {
      return await this.service.deleteDream({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
