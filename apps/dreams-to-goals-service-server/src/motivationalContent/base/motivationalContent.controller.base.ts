/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MotivationalContentService } from "../motivationalContent.service";
import { MotivationalContentCreateInput } from "./MotivationalContentCreateInput";
import { MotivationalContent } from "./MotivationalContent";
import { MotivationalContentFindManyArgs } from "./MotivationalContentFindManyArgs";
import { MotivationalContentWhereUniqueInput } from "./MotivationalContentWhereUniqueInput";
import { MotivationalContentUpdateInput } from "./MotivationalContentUpdateInput";

export class MotivationalContentControllerBase {
  constructor(protected readonly service: MotivationalContentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MotivationalContent })
  async createMotivationalContent(
    @common.Body() data: MotivationalContentCreateInput
  ): Promise<MotivationalContent> {
    return await this.service.createMotivationalContent({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MotivationalContent] })
  @ApiNestedQuery(MotivationalContentFindManyArgs)
  async motivationalContents(
    @common.Req() request: Request
  ): Promise<MotivationalContent[]> {
    const args = plainToClass(MotivationalContentFindManyArgs, request.query);
    return this.service.motivationalContents({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MotivationalContent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async motivationalContent(
    @common.Param() params: MotivationalContentWhereUniqueInput
  ): Promise<MotivationalContent | null> {
    const result = await this.service.motivationalContent({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MotivationalContent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMotivationalContent(
    @common.Param() params: MotivationalContentWhereUniqueInput,
    @common.Body() data: MotivationalContentUpdateInput
  ): Promise<MotivationalContent | null> {
    try {
      return await this.service.updateMotivationalContent({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MotivationalContent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMotivationalContent(
    @common.Param() params: MotivationalContentWhereUniqueInput
  ): Promise<MotivationalContent | null> {
    try {
      return await this.service.deleteMotivationalContent({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
